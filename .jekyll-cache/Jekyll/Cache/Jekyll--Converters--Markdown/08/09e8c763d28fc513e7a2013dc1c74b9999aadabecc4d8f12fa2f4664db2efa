I"8U<p>Object-Oriented Programming (OOP) is the backbone of <strong>modern Java development</strong>, enabling modular, reusable, and maintainable code. Enterprises rely heavily on OOP principles to build <strong>scalable and robust applications</strong>, from microservices to complex backend systems.</p>

<p>In this post, we’ll cover:</p>

<ol>
  <li>Classes &amp; Objects</li>
  <li>Inheritance</li>
  <li>Polymorphism</li>
  <li>Abstraction</li>
  <li>Encapsulation</li>
  <li>Enterprise examples with modern Java features</li>
</ol>

<hr />

<h2 id="1-classes--objects">1. Classes &amp; Objects</h2>

<p><strong>Class:</strong> A blueprint for creating objects.
<strong>Object:</strong> An instance of a class with state (fields) and behavior (methods).</p>

<p><strong>Example – Enterprise: Employee Management</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">employeeId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">;</span>

    <span class="c1">// Constructor</span>
    <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">employeeId</span><span class="o">,</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">employeeId</span> <span class="o">=</span> <span class="n">employeeId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">salary</span> <span class="o">=</span> <span class="n">salary</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// Getter and Setter</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">salary</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSalary</span><span class="o">(</span><span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">salary</span> <span class="o">=</span> <span class="n">salary</span><span class="o">;</span> <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Employee: "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", ID: "</span> <span class="o">+</span> <span class="n">employeeId</span> <span class="o">+</span> <span class="s">", Salary: $"</span> <span class="o">+</span> <span class="n">salary</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Employee</span> <span class="n">emp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">,</span> <span class="mi">101</span><span class="o">,</span> <span class="mi">75000</span><span class="o">);</span>
        <span class="n">emp</span><span class="o">.</span><span class="na">displayInfo</span><span class="o">();</span>
        <span class="n">emp</span><span class="o">.</span><span class="na">setSalary</span><span class="o">(</span><span class="mi">80000</span><span class="o">);</span>
        <span class="n">emp</span><span class="o">.</span><span class="na">displayInfo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Representing real-world entities like employees, products, or transactions in enterprise applications.</p>

<hr />

<h2 id="2-inheritance">2. Inheritance</h2>

<p><strong>Inheritance</strong> allows a class to <strong>reuse fields and methods</strong> of another class. It promotes code reuse and establishes <strong>“is-a” relationships</strong>.</p>

<p><strong>Example – Enterprise: Employee Hierarchy</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" is working."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Subclass</span>
<span class="kd">class</span> <span class="nc">Manager</span> <span class="kd">extends</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Manager</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">manageTeam</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" is managing the team."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Manager</span> <span class="n">mgr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Manager</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
        <span class="n">mgr</span><span class="o">.</span><span class="na">work</span><span class="o">();</span>         <span class="c1">// inherited</span>
        <span class="n">mgr</span><span class="o">.</span><span class="na">manageTeam</span><span class="o">();</span>   <span class="c1">// subclass-specific</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Modeling real-world hierarchies, e.g., Employee → Manager → Director.</p>

<hr />

<h2 id="3-polymorphism">3. Polymorphism</h2>

<p><strong>Polymorphism</strong> allows objects to take <strong>multiple forms</strong>. Two types:</p>

<ul>
  <li><strong>Compile-time (Method Overloading)</strong></li>
  <li><strong>Runtime (Method Overriding)</strong></li>
</ul>

<p><strong>Example – Runtime Polymorphism in Enterprise: Notification System</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Notification</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">EmailNotification</span> <span class="kd">extends</span> <span class="nc">Notification</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Email sent: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SMSNotification</span> <span class="kd">extends</span> <span class="nc">Notification</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"SMS sent: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotificationService</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Notification</span> <span class="n">notification</span><span class="o">;</span>

        <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EmailNotification</span><span class="o">();</span>
        <span class="n">notification</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"Server down!"</span><span class="o">);</span>

        <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SMSNotification</span><span class="o">();</span>
        <span class="n">notification</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"High CPU usage!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Enterprise systems with multiple notification channels, payment methods, or document formats.</p>

<hr />

<h2 id="4-abstraction">4. Abstraction</h2>

<p><strong>Abstraction</strong> hides implementation details and exposes <strong>only essential functionality</strong> using <strong>abstract classes or interfaces</strong>.</p>

<p><strong>Example – Enterprise: Payment Gateway</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">PaymentGateway</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">pay</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PayPal</span> <span class="kd">implements</span> <span class="nc">PaymentGateway</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pay</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paid $"</span> <span class="o">+</span> <span class="n">amount</span> <span class="o">+</span> <span class="s">" via PayPal"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CreditCard</span> <span class="kd">implements</span> <span class="nc">PaymentGateway</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pay</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paid $"</span> <span class="o">+</span> <span class="n">amount</span> <span class="o">+</span> <span class="s">" via Credit Card"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentProcessor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">PaymentGateway</span> <span class="n">gateway</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PayPal</span><span class="o">();</span>
        <span class="n">gateway</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="mf">150.0</span><span class="o">);</span>

        <span class="n">gateway</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CreditCard</span><span class="o">();</span>
        <span class="n">gateway</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="mf">200.0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Abstracting implementation for flexible integration with multiple services or modules.</p>

<hr />

<h2 id="5-encapsulation">5. Encapsulation</h2>

<p><strong>Encapsulation</strong> restricts direct access to fields and <strong>exposes controlled access</strong> via getters/setters.</p>

<p><strong>Example – Enterprise: Secure Employee Salary Management</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">;</span> <span class="c1">// private field</span>

    <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="n">setSalary</span><span class="o">(</span><span class="n">salary</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">salary</span><span class="o">;</span> <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSalary</span><span class="o">(</span><span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">salary</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"Salary cannot be negative"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">salary</span> <span class="o">=</span> <span class="n">salary</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Prevent direct modification of sensitive data like salaries, passwords, or account balances.</p>

<hr />

<h2 id="6-modern-java-features-for-oop">6. Modern Java Features for OOP</h2>

<ul>
  <li><strong>Records</strong> for immutable data objects:</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">record</span> <span class="nf">EmployeeRecord</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div></div>

<ul>
  <li><strong>Sealed classes</strong> for controlled inheritance (Java 17+):</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sealed</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="n">permits</span> <span class="nc">Manager</span><span class="o">,</span> <span class="nc">Developer</span> <span class="o">{}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">Manager</span> <span class="kd">extends</span> <span class="nc">Employee</span> <span class="o">{}</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">Developer</span> <span class="kd">extends</span> <span class="nc">Employee</span> <span class="o">{}</span>
</code></pre></div></div>

<ul>
  <li><strong>Pattern Matching</strong> (Java 21 preview) for cleaner type checks.</li>
</ul>

<hr />

<h2 id="key-takeaways">Key Takeaways</h2>

<ul>
  <li><strong>Classes &amp; Objects</strong> → model real-world entities.</li>
  <li><strong>Inheritance</strong> → promotes code reuse and hierarchy modeling.</li>
  <li><strong>Polymorphism</strong> → enables flexible and extendable systems.</li>
  <li><strong>Abstraction</strong> → hides implementation details, improves modularity.</li>
  <li><strong>Encapsulation</strong> → protects internal state and ensures controlled access.</li>
  <li><strong>Modern Java features</strong> (records, sealed classes, pattern matching) enhance OOP in enterprise applications.</li>
</ul>
:ET