I"¯J<p>Exception handling is a <strong>critical part of building robust and resilient Java applications</strong>, especially in enterprise systems where failure handling is as important as the main logic. Java provides a rich exception handling mechanism that allows developers to gracefully handle errors without crashing the application.</p>

<p>In this post, weâ€™ll cover:</p>

<ol>
  <li><strong>Checked vs Unchecked Exceptions</strong></li>
  <li><strong>Try-Catch-Finally</strong></li>
  <li><strong>Custom Exceptions</strong></li>
  <li><strong>Enterprise examples with modern Java best practices</strong></li>
</ol>

<hr />

<h2 id="1-checked-vs-unchecked-exceptions">1. Checked vs Unchecked Exceptions</h2>

<p>Java exceptions are categorized into <strong>checked</strong> and <strong>unchecked</strong> exceptions:</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
      <th>Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Checked Exception</strong></td>
      <td>Must be either handled or declared in the method signature using <code class="language-plaintext highlighter-rouge">throws</code>. Typically recoverable.</td>
      <td><code class="language-plaintext highlighter-rouge">IOException</code>, <code class="language-plaintext highlighter-rouge">SQLException</code></td>
    </tr>
    <tr>
      <td><strong>Unchecked Exception</strong></td>
      <td>Extends <code class="language-plaintext highlighter-rouge">RuntimeException</code>. Handling is optional. Usually indicates programming errors.</td>
      <td><code class="language-plaintext highlighter-rouge">NullPointerException</code>, <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code></td>
    </tr>
  </tbody>
</table>

<p><strong>Example â€“ Enterprise Scenario: File Processing</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileHandler</span> <span class="o">{</span>

    <span class="c1">// Checked exception</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFile</span><span class="o">(</span><span class="nc">String</span> <span class="n">filePath</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="nc">Path</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">filePath</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// Unchecked exception</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"Divider cannot be zero"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">FileHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileHandler</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">handler</span><span class="o">.</span><span class="na">readFile</span><span class="o">(</span><span class="s">"config.yaml"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Error reading file: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="n">handler</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">// Throws unchecked exception</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Handling external resource failures (files, databases, API calls) with checked exceptions, and validating input or logic errors with unchecked exceptions.</p>

<hr />

<h2 id="2-try-catch-finally">2. Try-Catch-Finally</h2>

<p>The <code class="language-plaintext highlighter-rouge">try-catch-finally</code> block allows <strong>capturing exceptions, handling them, and performing cleanup operations</strong>.</p>

<p><strong>Syntax:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="c1">// risky code</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SpecificException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// handle exception</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// handle generic exception</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="c1">// always executed</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Enterprise Example â€“ Database Transaction Handling</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">processTransaction</span><span class="o">(</span><span class="nc">Transaction</span> <span class="n">tx</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">tx</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span>
        <span class="n">tx</span><span class="o">.</span><span class="na">updateBalance</span><span class="o">();</span>
        <span class="n">tx</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">tx</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span> <span class="c1">// handle failure</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Transaction failed: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">tx</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// always close connection</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Transaction processing ended"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Tip:</em> In modern Java, use <strong>try-with-resources</strong> for automatic resource management:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="o">=</span> <span class="nc">Database</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
     <span class="kt">var</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">())</span> <span class="o">{</span>

    <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="s">"UPDATE accounts SET balance=balance-100 WHERE id=1"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Database error: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This eliminates the need to manually close resources in <code class="language-plaintext highlighter-rouge">finally</code>.</p>

<hr />

<h2 id="3-custom-exceptions">3. Custom Exceptions</h2>

<p>Custom exceptions allow enterprises to <strong>define domain-specific error handling</strong>, making code more expressive and maintainable.</p>

<p><strong>Example â€“ Enterprise: Payment Processing</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Custom checked exception</span>
<span class="kd">class</span> <span class="nc">PaymentFailedException</span> <span class="kd">extends</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">PaymentFailedException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Custom unchecked exception</span>
<span class="kd">class</span> <span class="nc">InvalidPaymentMethodException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">InvalidPaymentMethodException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processPayment</span><span class="o">(</span><span class="nc">String</span> <span class="n">method</span><span class="o">,</span> <span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">PaymentFailedException</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"CREDIT_CARD"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"PAYPAL"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPaymentMethodException</span><span class="o">(</span><span class="s">"Unsupported payment method: "</span> <span class="o">+</span> <span class="n">method</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">amount</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">PaymentFailedException</span><span class="o">(</span><span class="s">"Payment amount must be greater than zero"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Payment of $"</span> <span class="o">+</span> <span class="n">amount</span> <span class="o">+</span> <span class="s">" processed via "</span> <span class="o">+</span> <span class="n">method</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">PaymentService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaymentService</span><span class="o">();</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">service</span><span class="o">.</span><span class="na">processPayment</span><span class="o">(</span><span class="s">"UPI"</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span> <span class="c1">// Unchecked exception</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">PaymentFailedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Payment error: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><em>Use-case:</em> Custom exceptions are invaluable in <strong>microservices, banking, and payment systems</strong>, where clear domain-specific error reporting is crucial.</p>

<hr />

<h2 id="4-modern-java-best-practices-for-exception-handling">4. Modern Java Best Practices for Exception Handling</h2>

<ul>
  <li><strong>Use <code class="language-plaintext highlighter-rouge">try-with-resources</code></strong> to manage IO, DB, and other closable resources.</li>
  <li>Prefer <strong>unchecked exceptions</strong> for programming errors and <strong>checked exceptions</strong> for recoverable failures.</li>
  <li><strong>Create meaningful custom exceptions</strong> for domain-specific error handling.</li>
  <li>Avoid catching <code class="language-plaintext highlighter-rouge">Exception</code> unless absolutely necessary; be <strong>specific</strong>.</li>
  <li><strong>Leverage records</strong> or pattern matching (Java 21) for structured exception messages if needed:</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">record</span> <span class="nf">ErrorResponse</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">,</span> <span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{}</span>

<span class="k">try</span> <span class="o">{</span>
    <span class="n">riskyOperation</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">error</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ErrorResponse</span><span class="o">(</span><span class="s">"IO_ERR"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="n">logError</span><span class="o">(</span><span class="n">error</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="key-takeaways">Key Takeaways</h2>

<ul>
  <li><strong>Checked exceptions</strong> â†’ anticipate and handle recoverable failures.</li>
  <li><strong>Unchecked exceptions</strong> â†’ programming errors or invalid input.</li>
  <li><strong>try-catch-finally</strong> â†’ handle errors and ensure cleanup.</li>
  <li><strong>Custom exceptions</strong> â†’ make enterprise code expressive and maintainable.</li>
  <li>Use <strong>modern Java features</strong> like try-with-resources, records, and pattern matching for more robust exception handling.</li>
</ul>
:ET