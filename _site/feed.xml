<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-16T16:31:00+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sujeet Prajapati — Java Developer</title><subtitle>Senior Java developer portfolio: Spring Boot, Microservices, AWS, PostgreSQL, Kafka. Blog + Projects + Resume.</subtitle><author><name>Sujeet Prajapati</name></author><entry><title type="html">Ultimate Java Learning Roadmap: From Classic to Latest Features</title><link href="http://localhost:4000/java-learning/2025/08/16/ultimate-java-learning-roadmap/" rel="alternate" type="text/html" title="Ultimate Java Learning Roadmap: From Classic to Latest Features" /><published>2025-08-16T00:00:00+05:30</published><updated>2025-08-16T00:00:00+05:30</updated><id>http://localhost:4000/java-learning/2025/08/16/ultimate-java-learning-roadmap</id><content type="html" xml:base="http://localhost:4000/java-learning/2025/08/16/ultimate-java-learning-roadmap/"><![CDATA[<p>Java is constantly evolving. Whether you’re a beginner or an experienced developer, understanding both old and new features is crucial for writing robust, maintainable, and modern Java applications. Here’s a detailed roadmap to guide you.</p>

<hr />

<h2 id="1-core-java-fundamentals"><strong>1. Core Java Fundamentals</strong></h2>

<p>Even with new versions, the foundation remains the same. Mastering these ensures you can adapt to new features easily.</p>

<ul>
  <li><strong>Data Types &amp; Variables</strong> – Primitive types, wrapper classes, and type casting.</li>
  <li><strong>Operators</strong> – Arithmetic, relational, logical, bitwise, and assignment operators.</li>
  <li><strong>Control Flow Statements</strong> – <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">else</code>, <code class="language-plaintext highlighter-rouge">switch</code>, loops (<code class="language-plaintext highlighter-rouge">for</code>, <code class="language-plaintext highlighter-rouge">while</code>, <code class="language-plaintext highlighter-rouge">do-while</code>).</li>
  <li><strong>Methods &amp; Recursion</strong> – Method overloading, recursion, variable arguments.</li>
  <li><strong>Exception Handling</strong> – Checked vs unchecked exceptions, try-catch-finally, custom exceptions.</li>
  <li><strong>Object-Oriented Programming (OOP)</strong> – Classes, objects, inheritance, polymorphism, abstraction, encapsulation.</li>
  <li><strong>Access Modifiers &amp; Packages</strong> – <code class="language-plaintext highlighter-rouge">public</code>, <code class="language-plaintext highlighter-rouge">private</code>, <code class="language-plaintext highlighter-rouge">protected</code>, default, package structure.</li>
</ul>

<hr />

<h2 id="2-advanced-core-java-concepts"><strong>2. Advanced Core Java Concepts</strong></h2>

<p>These are crucial for professional development and interview preparation.</p>

<ul>
  <li><strong>Collections Framework</strong> – <code class="language-plaintext highlighter-rouge">List</code>, <code class="language-plaintext highlighter-rouge">Set</code>, <code class="language-plaintext highlighter-rouge">Map</code>, <code class="language-plaintext highlighter-rouge">Queue</code>, <code class="language-plaintext highlighter-rouge">Deque</code>, and their implementations.</li>
  <li><strong>Generics</strong> – Type safety, generic methods, wildcards.</li>
  <li><strong>Streams &amp; Lambda Expressions</strong> – Functional programming in Java 8+, operations like <code class="language-plaintext highlighter-rouge">filter</code>, <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">reduce</code>.</li>
  <li><strong>Functional Interfaces</strong> – <code class="language-plaintext highlighter-rouge">Predicate</code>, <code class="language-plaintext highlighter-rouge">Function</code>, <code class="language-plaintext highlighter-rouge">Consumer</code>, <code class="language-plaintext highlighter-rouge">Supplier</code>.</li>
  <li><strong>Java I/O and NIO</strong> – File handling, buffered streams, serialization, Path API.</li>
  <li><strong>Concurrency</strong> – Threads, Runnable, Callable, ExecutorService, thread safety, <code class="language-plaintext highlighter-rouge">synchronized</code>, <code class="language-plaintext highlighter-rouge">volatile</code>.</li>
  <li><strong>Java Memory Model</strong> – Stack vs Heap, Garbage Collection, JVM internals.</li>
</ul>

<hr />

<h2 id="3-modern-java-features-java-8-to-21"><strong>3. Modern Java Features (Java 8 to 21)</strong></h2>

<p>Focus here to stay relevant in modern enterprise applications.</p>

<ul>
  <li>
    <p><strong>Java 8</strong></p>

    <ul>
      <li>Lambda Expressions &amp; Functional Programming</li>
      <li>Streams API &amp; Parallel Streams</li>
      <li>Default &amp; Static Methods in Interfaces</li>
      <li>Optional Class for null handling</li>
      <li>Date &amp; Time API (<code class="language-plaintext highlighter-rouge">java.time</code>)</li>
    </ul>
  </li>
  <li>
    <p><strong>Java 9</strong></p>

    <ul>
      <li>Module System (<code class="language-plaintext highlighter-rouge">module-info.java</code>)</li>
      <li>JShell (Java REPL)</li>
      <li>Improved <code class="language-plaintext highlighter-rouge">Stream</code> API (<code class="language-plaintext highlighter-rouge">takeWhile</code>, <code class="language-plaintext highlighter-rouge">dropWhile</code>)</li>
    </ul>
  </li>
  <li>
    <p><strong>Java 10-11</strong></p>

    <ul>
      <li>Local-Variable Type Inference (<code class="language-plaintext highlighter-rouge">var</code>)</li>
      <li>New <code class="language-plaintext highlighter-rouge">String</code> methods (<code class="language-plaintext highlighter-rouge">isBlank</code>, <code class="language-plaintext highlighter-rouge">lines</code>)</li>
      <li>HTTP Client API</li>
    </ul>
  </li>
  <li>
    <p><strong>Java 14-15</strong></p>

    <ul>
      <li>Records (compact data classes)</li>
      <li>Pattern Matching for <code class="language-plaintext highlighter-rouge">instanceof</code></li>
      <li>Text Blocks (<code class="language-plaintext highlighter-rouge">"""</code>)</li>
    </ul>
  </li>
  <li>
    <p><strong>Java 17 (LTS)</strong></p>

    <ul>
      <li>Sealed Classes</li>
      <li>Enhanced <code class="language-plaintext highlighter-rouge">switch</code> expressions</li>
      <li>Pattern Matching in <code class="language-plaintext highlighter-rouge">switch</code></li>
      <li>Strong encapsulation in JDK</li>
    </ul>
  </li>
  <li>
    <p><strong>Java 19-21 (Latest Features)</strong></p>

    <ul>
      <li>Virtual Threads (Project Loom)</li>
      <li>Structured Concurrency</li>
      <li>Record Patterns</li>
      <li>String templates (Preview in Java 21)</li>
      <li>Scoped Values and Foreign Function &amp; Memory API</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="4-java-design-patterns--best-practices"><strong>4. Java Design Patterns &amp; Best Practices</strong></h2>

<p>Learning patterns ensures you can design maintainable and reusable code.</p>

<ul>
  <li><strong>Creational Patterns</strong> – Singleton, Factory, Builder</li>
  <li><strong>Structural Patterns</strong> – Adapter, Decorator, Proxy</li>
  <li><strong>Behavioral Patterns</strong> – Observer, Strategy, Command</li>
  <li><strong>SOLID Principles</strong> – Maintainable code architecture</li>
  <li><strong>Clean Code Practices</strong> – Naming conventions, code readability, modularization</li>
</ul>

<hr />

<h2 id="5-java-ecosystem--tools"><strong>5. Java Ecosystem &amp; Tools</strong></h2>

<p>To be a professional Java developer, you must also know the ecosystem:</p>

<ul>
  <li><strong>Build Tools</strong> – Maven, Gradle</li>
  <li><strong>Unit Testing</strong> – JUnit 5, Mockito, TestNG</li>
  <li><strong>Logging</strong> – SLF4J, Logback, Log4j2</li>
  <li><strong>Version Control</strong> – Git &amp; GitHub</li>
  <li><strong>IDEs</strong> – IntelliJ IDEA, Eclipse</li>
</ul>

<hr />

<h2 id="6-java-in-real-world-applications"><strong>6. Java in Real-world Applications</strong></h2>

<p>Learn how Java is applied in real projects:</p>

<ul>
  <li><strong>Spring Framework</strong> – Spring Boot, Spring Data, Spring Security</li>
  <li><strong>Microservices</strong> – REST APIs, Spring Cloud, Kafka integration</li>
  <li><strong>Database</strong> – JDBC, JPA/Hibernate, PostgreSQL, MongoDB</li>
  <li><strong>Cloud &amp; DevOps</strong> – AWS Java SDK, Docker, Kubernetes</li>
</ul>

<hr />

<h2 id="7-optional-advanced-java-concepts"><strong>7. Optional: Advanced Java Concepts</strong></h2>

<p>These give you an edge for high-performance and scalable systems:</p>

<ul>
  <li><strong>Reactive Programming</strong> – Project Reactor, RxJava</li>
  <li><strong>Concurrency Utilities</strong> – ForkJoinPool, CompletableFuture</li>
  <li><strong>JVM Performance Tuning</strong> – Profiling, GC tuning, memory leaks analysis</li>
  <li><strong>Security</strong> – Encryption, JWT, OAuth2</li>
</ul>

<hr />

<h3 id="conclusion"><strong>Conclusion</strong></h3>

<p>A modern Java developer should combine <strong>solid core Java knowledge</strong> with <strong>latest language features</strong> and <strong>framework expertise</strong>. Start from fundamentals, then explore streams, lambda expressions, modules, and finally embrace Java 17–21 innovations like virtual threads, records, and structured concurrency.</p>]]></content><author><name>Sujeet Prajapati</name></author><category term="java-learning" /><summary type="html"><![CDATA[Java in 2025, covering both latest features (Java 17, 21) and the classic/older Java topics]]></summary></entry><entry><title type="html">Mastering Java Data Types &amp;amp; Variables: Primitive Types, Wrappers, and Type Casting</title><link href="http://localhost:4000/java-best-practices/2025/08/16/data-types-variables/" rel="alternate" type="text/html" title="Mastering Java Data Types &amp;amp; Variables: Primitive Types, Wrappers, and Type Casting" /><published>2025-08-16T00:00:00+05:30</published><updated>2025-08-16T00:00:00+05:30</updated><id>http://localhost:4000/java-best-practices/2025/08/16/data-types-variables</id><content type="html" xml:base="http://localhost:4000/java-best-practices/2025/08/16/data-types-variables/"><![CDATA[<h1 id="java-data-types--variables--primitive-types-wrapper-classes-and-type-casting">Java Data Types &amp; Variables – Primitive Types, Wrapper Classes, and Type Casting</h1>

<p>Java is a <strong>strongly-typed language</strong>, which means every variable has a type, and understanding these types is key to writing robust, efficient code.<br />
In this guide, we explore <strong>primitive types</strong>, <strong>wrapper classes</strong>, and <strong>type casting</strong>, complete with examples, tips, and visual explanations.</p>

<hr />

<h2 id="1️⃣-java-variables-the-basics">1️⃣ Java Variables: The Basics</h2>

<p>A <strong>variable</strong> is a named memory location that stores a value.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>          
<span class="kt">double</span> <span class="n">salary</span> <span class="o">=</span> <span class="mf">45000.75</span><span class="o">;</span> 
<span class="kt">char</span> <span class="n">grade</span> <span class="o">=</span> <span class="sc">'A'</span><span class="o">;</span>      
<span class="kt">boolean</span> <span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> 
</code></pre></div></div>

<div class="tip">
<strong>Tips:</strong>
<ul>
<li>Use descriptive variable names: <code>userAge</code>, <code>totalSalary</code>.</li>
<li>Initialize variables when declaring whenever possible.</li>
<li>Follow <strong>camelCase</strong> for variables and <strong>PascalCase</strong> for classes.</li>
</ul>
</div>

<hr />

<h2 id="2️⃣-primitive-data-types">2️⃣ Primitive Data Types</h2>

<div style="overflow-x:auto; margin: 1rem 0;">
<table style="width:100%; border-collapse: collapse; min-width: 400px;">
  <thead>
    <tr>
      <th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Type</th>
      <th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Size</th>
      <th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Default Value</th>
      <th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">byte</td>
      <td style="border: 1px solid #ddd; padding: 8px;">1 byte</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>byte b = 10;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">short</td>
      <td style="border: 1px solid #ddd; padding: 8px;">2 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>short s = 100;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">int</td>
      <td style="border: 1px solid #ddd; padding: 8px;">4 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>int i = 1000;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">long</td>
      <td style="border: 1px solid #ddd; padding: 8px;">8 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0L</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>long l = 10000L;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">float</td>
      <td style="border: 1px solid #ddd; padding: 8px;">4 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0.0f</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>float f = 10.5f;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">double</td>
      <td style="border: 1px solid #ddd; padding: 8px;">8 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">0.0d</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>double d = 99.99;</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">char</td>
      <td style="border: 1px solid #ddd; padding: 8px;">2 bytes</td>
      <td style="border: 1px solid #ddd; padding: 8px;">'\u0000'</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>char c = 'A';</code></td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px;">boolean</td>
      <td style="border: 1px solid #ddd; padding: 8px;">1 bit</td>
      <td style="border: 1px solid #ddd; padding: 8px;">false</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><code>boolean flag = true;</code></td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="primitive-type-hierarchy-mermaid-diagram">Primitive Type Hierarchy (Mermaid Diagram)</h3>

<pre><code class="language-mermaid">Byte --&gt; Short --&gt; Int --&gt; Long --&gt; Float --&gt; Double
Char --&gt; Int
Boolean --&gt; Boolean
</code></pre>

<div class="tip">
<strong>Best Practices:</strong>
<ul>
<li>Use the smallest data type to save memory.</li>
<li>Use <code>int</code> for arithmetic unless <code>long</code> is required.</li>
<li>Use <code>boolean</code> for flags.</li>
</ul>
</div>

<hr />

<h2 id="3️⃣-wrapper-classes">3️⃣ Wrapper Classes</h2>

<p>Primitive types have <strong>object counterparts</strong>:</p>

<div style="overflow-x:auto; margin: 1rem 0;">
<table style="width:100%; border-collapse: collapse; min-width: 300px;">
<thead>
<tr>
<th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Primitive</th>
<th style="border: 1px solid #ddd; padding: 8px; text-align:left;">Wrapper Class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">byte</td>
<td style="border: 1px solid #ddd; padding: 8px;">Byte</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">short</td>
<td style="border: 1px solid #ddd; padding: 8px;">Short</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">int</td>
<td style="border: 1px solid #ddd; padding: 8px;">Integer</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">long</td>
<td style="border: 1px solid #ddd; padding: 8px;">Long</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">float</td>
<td style="border: 1px solid #ddd; padding: 8px;">Float</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">double</td>
<td style="border: 1px solid #ddd; padding: 8px;">Double</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">char</td>
<td style="border: 1px solid #ddd; padding: 8px;">Character</td>
</tr>
<tr>
<td style="border: 1px solid #ddd; padding: 8px;">boolean</td>
<td style="border: 1px solid #ddd; padding: 8px;">Boolean</td>
</tr>
</tbody>
</table>
</div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
<span class="nc">Integer</span> <span class="n">wrapperNum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">);</span> <span class="c1">// Boxing</span>
<span class="kt">int</span> <span class="n">primitiveNum</span> <span class="o">=</span> <span class="n">wrapperNum</span><span class="o">.</span><span class="na">intValue</span><span class="o">();</span> <span class="c1">// Unboxing</span>

<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">parsedNum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">str</span><span class="o">);</span> <span class="c1">// String -&gt; int</span>
</code></pre></div></div>

<div class="tip">
<strong>Why use wrappers?</strong>
<ul>
<li>Collections cannot store primitives (<code>ArrayList&lt;Integer&gt;</code> instead of <code>ArrayList&lt;int&gt;</code>).</li>
<li>Utility methods: parsing, comparison, conversion.</li>
<li>Works with generics and reflection.</li>
</ul>
</div>

<hr />

<h2 id="4️⃣-type-casting-in-java">4️⃣ Type Casting in Java</h2>

<p><strong>Type casting</strong> converts one type to another.</p>

<h3 id="a-implicit-casting-widening">a) Implicit Casting (Widening)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// int -&gt; double</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">// 100.0</span>
</code></pre></div></div>

<h3 id="b-explicit-casting-narrowing">b) Explicit Casting (Narrowing)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">123.45</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// double -&gt; int</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// 123</span>
</code></pre></div></div>

<h3 id="c-primitives--wrappers">c) Primitives &amp; Wrappers</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">wrapperInt</span> <span class="o">=</span> <span class="mi">50</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">wrapperInt</span><span class="o">;</span> <span class="c1">// auto-unboxing + widening</span>
<span class="nc">Integer</span> <span class="n">anotherInt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// narrowing + boxing</span>
</code></pre></div></div>

<div class="tip">
<strong>Tips:</strong>
<ul>
<li>Prefer implicit casting for safety.</li>
<li>Avoid unnecessary explicit casting to prevent precision loss.</li>
<li>Handle potential <code>NumberFormatException</code> when converting strings.</li>
</ul>
</div>

<hr />

<h2 id="5️⃣-common-mistakes">5️⃣ Common Mistakes</h2>

<ul>
  <li><strong>Mixing types in arithmetic</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">3.5</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span> <span class="c1">// result is double</span>
</code></pre></div></div>

<ul>
  <li><strong>Null wrappers</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">num</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="c1">// int val = num; // NullPointerException</span>
</code></pre></div></div>

<ul>
  <li><strong>Precision issues</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">0.1f</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span> <span class="o">==</span> <span class="n">d</span><span class="o">);</span> <span class="c1">// false</span>
</code></pre></div></div>

<hr />

<h2 id="6️⃣-example-bringing-it-all-together">6️⃣ Example: Bringing It All Together</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataTypeDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">28</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">salary</span> <span class="o">=</span> <span class="mf">45000.75</span><span class="o">;</span>

        <span class="c1">// Type casting</span>
        <span class="kt">int</span> <span class="n">roundedSalary</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">salary</span><span class="o">;</span>

        <span class="c1">// Wrapper usage</span>
        <span class="nc">Integer</span> <span class="n">ageWrapper</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span> <span class="c1">// Autoboxing</span>
        <span class="kt">int</span> <span class="n">agePrimitive</span> <span class="o">=</span> <span class="n">ageWrapper</span><span class="o">;</span> <span class="c1">// Unboxing</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Age: "</span> <span class="o">+</span> <span class="n">agePrimitive</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Salary: "</span> <span class="o">+</span> <span class="n">salary</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Rounded Salary: "</span> <span class="o">+</span> <span class="n">roundedSalary</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Output:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Age: 28
Salary: 45000.75
Rounded Salary: 45000
</code></pre></div></div>

<hr />

<h2 id="7️⃣-key-takeaways">7️⃣ Key Takeaways</h2>

<ul>
  <li>Use <strong>primitives</strong> for performance, <strong>wrappers</strong> when objects are needed.</li>
  <li>Initialize variables and follow naming conventions.</li>
  <li>Use <strong>implicit casting</strong> where possible.</li>
  <li>Watch for nulls and precision issues</li>
</ul>

<p>.</p>

<hr />

<style>
.tip {
  border-left: 6px solid #2196F3;
  padding: 12px;
  margin: 12px 0;
  border-radius: 5px;
}
</style>]]></content><author><name>Sujeet Prajapati</name></author><category term="java-best-practices" /><summary type="html"><![CDATA[Java Data Types &amp; Variables – Primitive Types, Wrapper Classes, and Type Casting]]></summary></entry><entry><title type="html">First Steps into Java: A Beginner’s Guide</title><link href="http://localhost:4000/java/2025/08/15/first-post/" rel="alternate" type="text/html" title="First Steps into Java: A Beginner’s Guide" /><published>2025-08-15T00:00:00+05:30</published><updated>2025-08-15T00:00:00+05:30</updated><id>http://localhost:4000/java/2025/08/15/first-post</id><content type="html" xml:base="http://localhost:4000/java/2025/08/15/first-post/"><![CDATA[<h1 id="welcome-to-the-world-of-java">Welcome to the World of Java!</h1>

<p>Java is everywhere – from your Android apps to enterprise-level backend systems. It’s one of the most popular programming languages in the world, known for its simplicity, portability, and powerful features. Whether you are a beginner or coming from another programming language, Java is a great place to start.</p>

<hr />

<h2 id="why-learn-java">Why Learn Java?</h2>

<ul>
  <li><strong>Platform Independent:</strong> Write once, run anywhere (thanks to JVM).</li>
  <li><strong>Object-Oriented:</strong> Helps in designing modular and reusable code.</li>
  <li><strong>Rich Ecosystem:</strong> Tons of libraries, frameworks, and tools.</li>
  <li><strong>Community Support:</strong> A massive global community to help you learn and grow.</li>
</ul>

<hr />

<h2 id="installing-java">Installing Java</h2>

<ol>
  <li>Download and install <strong>Java JDK</strong> from <a href="https://www.oracle.com/java/technologies/javase-jdk17-downloads.html">Oracle</a> or <a href="https://openjdk.org/">OpenJDK</a>.</li>
  <li>Set the <code class="language-plaintext highlighter-rouge">JAVA_HOME</code> environment variable.</li>
  <li>Verify installation:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-version</span>
javac <span class="nt">-version</span>

</code></pre></div></div>
<hr />
<h2 id="your-first-java-program">Your First Java Program</h2>

<p>Let’s write a simple Java program to print a greeting.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class HelloJava <span class="o">{</span>
    public static void main<span class="o">(</span>String[] args<span class="o">)</span> <span class="o">{</span>
        System.out.println<span class="o">(</span><span class="s2">"Hello, Java World!"</span><span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>Explanation:</p>

<ul>
  <li>public class HelloJava – Defines a class named HelloJava.</li>
  <li>public static void main(String[] args) – The entry point of any Java program.</li>
  <li>System.out.println(“Hello, Java World!”); – Prints text to the console.</li>
</ul>

<p>Run the program using:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>javac HelloJava.java
java HelloJava

</code></pre></div></div>
<p>Output:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, Java World!
</code></pre></div></div>
<hr />
<h2 id="core-concepts-to-explore-next">Core Concepts to Explore Next</h2>
<ol>
  <li>Variables &amp; Data Types – Store and manipulate data.</li>
  <li>Operators &amp; Expressions – Perform calculations.</li>
  <li>Control Flow Statements – if, for, while for decision making.</li>
  <li>Methods – Reusable blocks of code.</li>
  <li>Object-Oriented Programming – Classes, Objects, Inheritance, Polymorphism.</li>
</ol>

<hr />
<p>Pro Tip</p>

<ul>
  <li>Practice regularly and build small projects. Even creating a simple calculator or to-do list app in Java will help solidify your understanding.</li>
</ul>

<hr />
<h3 id="java-is-not-just-a-language-its-a-toolkit-to-build-everything-from-small-apps-to-enterprise-level-systems-start-small-stay-consistent-and-soon-youll-be-writing-powerful-java-applications-confidently">Java is not just a language; it’s a toolkit to build everything from small apps to enterprise-level systems. Start small, stay consistent, and soon you’ll be writing powerful Java applications confidently!</h3>]]></content><author><name>Sujeet Prajapati</name></author><category term="java" /><summary type="html"><![CDATA[How to run your first java program]]></summary></entry></feed>